from typing import Union, Tuple, Optional

import torch
from torch import nn, Tensor
from torch.nn.functional import sigmoid

class FrequencyConvolution(nn.Module):
    """
        A PyTorch module for applying frequency convolution operations on input tensors.

        This module performs convolutions in the frequency domain, processing both the width and height dimensions of the input tensor separately.

        Attributes:
        - in_channels (int): Number of input channels of the input tensor.
        - out_channels (int): Number of output channels generated by the convolutions.
        - conv_w (nn.Conv2d): Convolution operation applied to the frequency-transformed width dimension of the input tensor.
        - conv_h (nn.Conv2d): Convolution operation applied to the frequency-transformed height dimension of the input tensor.
        - w_factor (Tensor): Factor used to weigh the contribution of the width and height frequency convolutions.
    """
    def __init__(
            self,
            in_channels: int,
            out_channels: int,
            *,
            kernel_size: Union[int, Tuple[int, int]] = 3,
            stride: int = 1,
            padding: int = 1,
            initial_factor: Optional[float] = None
    ):
        """
        :param in_channels: Number of input channels.
        :param out_channels: Number of output channels.
        :param kernel_size: Size of the convolution kernel.
        :param stride: Stride of the convolution.
        :param padding: Padding added to all four sides of the input.
        """
        super(FrequencyConvolution, self).__init__()

        self.out_channels = out_channels

        self.conv_w = nn.Conv2d(
            in_channels=2 * in_channels,
            out_channels=2 * out_channels,
            kernel_size=kernel_size,
            stride=stride,
            padding=padding
        )
        self.conv_h = nn.Conv2d(
            in_channels=2 * in_channels,
            out_channels=2 * out_channels,
            kernel_size=kernel_size,
            stride=stride,
            padding=padding
        )
        if initial_factor is None:
            initial_factor = torch.rand(1).item()

        self.register_buffer(
            name='w_factor',
            tensor=torch.tensor(initial_factor)
        )

    def forward(self, x: Tensor) -> Tensor:
        """
        :param x: Input tensor to be processed.
        :return: Processed tensor after applying convolution and inverse FFT operations in both the width and height dimensions.
        """
        freq_w = torch.fft.fft(x, dim=-1)
        freq_w = torch.cat([freq_w.real, freq_w.imag], dim=1)

        freq_w = self.conv_w(freq_w)
        freq_w = torch.complex(freq_w[:, :self.out_channels], freq_w[:, self.out_channels:])

        freq_w = torch.fft.ifft(freq_w, dim=-1).real

        freq_h = torch.fft.fft(x, dim=-2)
        freq_h = torch.cat([freq_h.real, freq_h.imag], dim=1)

        freq_h = self.conv_h(freq_h)
        freq_h = torch.complex(freq_h[:, :self.out_channels], freq_h[:, self.out_channels:])

        freq_h = torch.fft.ifft(freq_h, dim=-2).real

        f = sigmoid(self.w_factor)
        return f * freq_w + (1-f) * freq_h


class FrequencyConvolution2d(nn.Module):
    """
        A PyTorch module for applying frequency convolution operations on input tensors.

        This module performs convolutions in the frequency domain, processing both the width and height dimensions of the input tensor separately.

        Attributes:
        - in_channels (int): Number of input channels of the input tensor.
        - out_channels (int): Number of output channels generated by the convolutions.
        - conv (nn.Conv2d): Convolution operation applied to the frequency-transformed input tensor.
    """
    def __init__(
            self,
            in_channels: int,
            out_channels: int,
            *,
            kernel_size: Union[int, Tuple[int, int]] = 3,
            stride: int = 1,
            padding: int = 1,
    ):
        """
        :param in_channels: Number of input channels.
        :param out_channels: Number of output channels.
        :param kernel_size: Size of the convolution kernel.
        :param stride: Stride of the convolution.
        :param padding: Padding added to all four sides of the input.
        """
        super(FrequencyConvolution2d, self).__init__()

        self.in_channels = in_channels
        self.out_channels = out_channels

        self.conv = nn.Conv2d(
            in_channels=2 * in_channels,
            out_channels=2 * out_channels,
            kernel_size=kernel_size,
            stride=stride,
            padding=padding
        )

    def forward(self, x: Tensor) -> Tensor:
        """
        :param x: Input tensor to be processed.
        :return: Processed tensor after applying convolution and inverse FFT operations in both the width and height dimensions.
        """
        x = torch.fft.fft2(x)
        x = torch.cat([x.real, x.imag], dim=1)
        x = self.conv(x)
        x = torch.complex(x[:, :self.out_channels], x[:, self.out_channels:])
        x = torch.fft.ifft2(x).real

        return x

